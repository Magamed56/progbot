import os
import pandas as pd
import datetime
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters


# ID Google –¢–∞–±–ª–∏—Ü –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
SPREADSHEET_ID_RU = "1g1XqVEb0B6vI7f0Oh1QDjGQ-hEwtGjoMPSzwvOWwrZ4"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
SPREADSHEET_ID_KG = "1xqsSnmsgoMN69fzk5BIDfd9OsphfLQHz42_V60RfNao"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
USER_LANGUAGE = {}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
def get_tasks(task_type, language):
    # –í—ã–±–∏—Ä–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    spreadsheet_id = SPREADSHEET_ID_RU if language == "ru" else SPREADSHEET_ID_KG
    url = f"https://docs.google.com/spreadsheets/d/{spreadsheet_id}/gviz/tq?tqx=out:csv"
    
    try:
        df = pd.read_csv(url)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return {}

    now = datetime.datetime.now()
    tasks = {}

    for _, row in df.iterrows():
        if str(row.get("–¢–∏–ø", "")).strip() == task_type:
            unlock_date_str = str(row.get("–î–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", "")).strip()
            unlock_time_str = str(row.get("–í—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", "")).strip()

            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                unlock_date = datetime.datetime.strptime(unlock_date_str, "%Y-%m-%d").date()
                unlock_time = datetime.datetime.strptime(unlock_time_str, "%H:%M").time()
                unlock_datetime = datetime.datetime.combine(unlock_date, unlock_time)

                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
                time_left = unlock_datetime - now
                days_left = time_left.days
                hours_left = time_left.seconds // 3600
                minutes_left = (time_left.seconds % 3600) // 60
            except ValueError:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ

            tasks[row["–ù–∞–∑–≤–∞–Ω–∏–µ"]] = {
                "description": row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"),
                "link": row.get("–°—Å—ã–ª–∫–∞", "#"),
                "unlock_datetime": unlock_datetime,
                "days_left": days_left,
                "hours_left": hours_left,
                "minutes_left": minutes_left
            }

    return tasks

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton("üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å–∫–∏–π")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª —Ç–∞–Ω–¥–∞“£—ã–∑:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def choose_language(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        USER_LANGUAGE[user_id] = "ru"
        await update.message.reply_text("–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω: –†—É—Å—Å–∫–∏–π")
        await show_main_menu(update, context)
    elif text == "üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å–∫–∏–π":
        USER_LANGUAGE[user_id] = "kg"
        await update.message.reply_text("–¢–∏–ª —Ç–∞–Ω–¥–∞–ª–¥—ã: –ö—ã—Ä–≥—ã–∑—á–∞")
        await show_main_menu(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª —Ç–∞–Ω–¥–∞“£—ã–∑.")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    language = USER_LANGUAGE.get(user_id, "ru")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

    if language == "ru":
        keyboard = [
            [KeyboardButton("üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã"), KeyboardButton("üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")],
        ]
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    else:
        keyboard = [
            [KeyboardButton("üìö –õ–µ–∫—Ü–∏—è–ª–∞—Ä"), KeyboardButton("üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–ª—ã–∫ –∏—à—Ç–µ—Ä")],
        ]
        text = "–ë”©–ª“Ø–º–¥“Ø —Ç–∞–Ω–¥–∞“£—ã–∑:"

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º
async def show_topics(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    language = USER_LANGUAGE.get(user_id, "ru")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

    if language == "ru":
        task_type = "–õ–µ–∫—Ü–∏—è" if update.message.text == "üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã" else "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è"
    else:
        task_type = "–õ–µ–∫—Ü–∏—è" if update.message.text == "üìö –õ–µ–∫—Ü–∏—è–ª–∞—Ä" else "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–ª—ã–∫ –∏—à"

    tasks = get_tasks(task_type, language)

    if not tasks:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º." if language == "ru" else "–ñ–µ—Ç–∫–∏–ª–∏–∫—Ç“Ø“Ø —Ç–µ–º–∞–ª–∞—Ä –∂–æ–∫.")
        return

    keyboard = []
    for name, details in tasks.items():
        if details["days_left"] > 0 or details["hours_left"] > 0 or details["minutes_left"] > 0:
            text = f"{name} (‚è≥ {details['days_left']} –¥–Ω., {details['hours_left']} —á., {details['minutes_left']} –º–∏–Ω.)" if language == "ru" else f"{name} (‚è≥ {details['days_left']} –∫“Ø–Ω, {details['hours_left']} —Å–∞–∞—Ç, {details['minutes_left']} –º“Ø–Ω”©—Ç)"
        else:
            text = name
        keyboard.append([KeyboardButton(text)])

    keyboard.append([KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥" if language == "ru" else "‚¨Ö –ê—Ä—Ç–∫–∞")])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"üìú {task_type}:" if language == "ru" else f"üìú {task_type}:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
async def show_task(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    language = USER_LANGUAGE.get(user_id, "ru")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

    if update.message.text == ("‚¨Ö –ù–∞–∑–∞–¥" if language == "ru" else "‚¨Ö –ê—Ä—Ç–∫–∞"):
        await show_main_menu(update, context)
        return

    task_name = update.message.text.split(" (‚è≥")[0]  # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –∫–Ω–æ–ø–∫–∏
    tasks = {**get_tasks("–õ–µ–∫—Ü–∏—è", language), **get_tasks("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è", language)}  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–µ–∫—Ü–∏–∏ –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ
    task = tasks.get(task_name)

    if not task:
        await update.message.reply_text("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." if language == "ru" else "–¢–µ–º–∞ —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫.")
        return

    now = datetime.datetime.now()
    if now < task["unlock_datetime"]:
        time_left = task["unlock_datetime"] - now
        days_left = time_left.days
        hours_left = time_left.seconds // 3600
        minutes_left = (time_left.seconds % 3600) // 60

        await update.message.reply_text(
            f"‚õî –¢–µ–º–∞ \"{task_name}\" –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            f"üìÖ –û–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è {task['unlock_datetime'].strftime('%Y-%m-%d %H:%M')}.\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω., {hours_left} —á., {minutes_left} –º–∏–Ω."
            if language == "ru" else
            f"‚õî –¢–µ–º–∞ \"{task_name}\" –∞–∑—ã—Ä—ã–Ω—á–∞ –∂–µ—Ç–∫–∏–ª–∏–∫—Ç“Ø“Ø —ç–º–µ—Å.\n"
            f"üìÖ –ê–ª {task['unlock_datetime'].strftime('%Y-%m-%d %H:%M')} –∞—á—ã–ª–∞—Ç.\n"
            f"‚è≥ –ö–∞–ª–¥—ã: {days_left} –∫“Ø–Ω, {hours_left} —Å–∞–∞—Ç, {minutes_left} –º“Ø–Ω”©—Ç."
        )
    else:
        text = f"üìå *{task_name}*\n{task['description']}\n[–í–æ—Ç –≤–∞–º —Å—Å—ã–ª–∫–∞]({task['link']})"
        await update.message.reply_text(text, parse_mode="Markdown")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
app = Application.builder().token(os.getenv("TOKEN")).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üá∑üá∫ –†—É—Å—Å–∫–∏–π|üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å–∫–∏–π"), choose_language))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã|üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã|üìö –õ–µ–∫—Ü–∏—è–ª–∞—Ä|üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–ª—ã–∫ –∏—à—Ç–µ—Ä"), show_topics))
app.add_handler(MessageHandler(filters.TEXT, show_task))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
